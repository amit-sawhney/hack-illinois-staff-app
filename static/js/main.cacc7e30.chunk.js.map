{"version":3,"sources":["mealIcon.svg","miniEvent.svg","workshopIcon.svg","speakerIcon.svg","defaultIcon.svg","Components/Event/Event.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","margin","padding","eventHeader","display","iconSize","height","spacing","width","marginLeft","footer","flexDirection","favoriteIcon","marginRight","color","fontSize","Event","props","classes","useState","icon","setIcon","FavoriteBorder","className","favorite","setFavorite","title","name","type","useEffect","mealIcon","miniEvent","workshopIcon","speakerIcon","defaultIcon","Paper","Typography","style","flexGrow","variant","time","fullTime","Avatar","src","Divider","eventInfo","paragraph","description","url","Button","background","href","target","IconButton","onClick","displayName","Zoom","in","Favorite","appBar","zIndex","drawer","flexShrink","drawerPaper","drawerContainer","overflow","content","breakpoints","up","paddingLeft","dayItem","textAlign","activeDay","borderBottom","paddingBottom","menuButton","toolbar","mixins","maxWidth","App","events","setEvents","day","setDay","mobileOpen","setMobileOpen","useTheme","window","handleDrawerToggle","formatTime","unix_time","date","Date","hours","getHours","minutes","getMinutes","daySplit","getDay","month","getMonth","dayOfMonth","getDate","substr","a","fetch","response","json","modified_json","forEach","event","startTime","new_json","unix","parseInt","id","dayOfWeek","endTime","fullDate","eventType","url_idx","indexOf","length","split","format_date","push","sort","b","sorted_json","first_day","temp","getEvents","container","undefined","document","body","Drawer","paper","Toolbar","List","map","text","index","ListItem","button","key","ListItemText","primary","CssBaseline","AppBar","position","edge","Menu","alt","image","Hidden","smUp","implementation","anchor","direction","open","onClose","ModalProps","keepMounted","xsDown","start","end","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,4cCUrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,OAAQ,OACRC,QAAS,QAEbC,YAAa,CACTC,QAAS,QAEbC,SAAU,CACNC,OAAQP,EAAMQ,QAAQ,GACtBC,MAAOT,EAAMQ,QAAQ,GACrBE,WAAYV,EAAMQ,QAAQ,IAE9BG,OAAQ,CACJN,QAAS,OACTO,cAAe,UAEnBC,aAAc,CACVC,YAAa,EACbJ,WAAY,OACZK,MAAO,UACPC,SAAU,YA8EHC,EA1ED,SAACC,GACX,IAAMC,EAAUrB,IADK,EAEGsB,qBAFH,mBAEdC,EAFc,KAERC,EAFQ,OAGWF,mBAAS,kBAACG,EAAA,EAAD,CAAgBC,UAAWL,EAAQN,gBAHvD,mBAGdY,EAHc,KAGJC,EAHI,KAkBfC,EAAK,UAAMT,EAAMU,KAAZ,YAAoBV,EAAMW,MAgBrC,OAdAC,qBAAU,WACa,WAAfZ,EAAMW,KACNP,EAAQS,KACc,gBAAfb,EAAMW,KACbP,EAAQU,KACc,eAAfd,EAAMW,KACbP,EAAQW,KACc,cAAff,EAAMW,KACbP,EAAQY,KAERZ,EAAQa,OAEb,CAACjB,EAAMW,OAGN,kBAACO,EAAA,EAAD,CAAOZ,UAAWL,EAAQlB,MACtB,yBAAKuB,UAAWL,EAAQf,aACpB,kBAACiC,EAAA,EAAD,CAAYC,MAAO,CAAEC,SAAU,GAAKC,QAAQ,MACvCb,GAGL,kBAACU,EAAA,EAAD,CAAYb,UAAWL,EAAQsB,KAAMD,QAAQ,MACxCtB,EAAMwB,UAEX,kBAACC,EAAA,EAAD,CAAQnB,UAAWL,EAAQb,SAAUkC,QAAQ,UAAUI,IAAKvB,KAEhE,6BACA,kBAACwB,EAAA,EAAD,MACA,6BACA,yBAAKrB,UAAWL,EAAQ2B,WACpB,kBAACT,EAAA,EAAD,CAAYU,WAAS,GAChB7B,EAAM8B,cAGf,yBAAKxB,UAAWL,EAAQR,QAEF,KAAdO,EAAM+B,IACF,kBAACC,EAAA,EAAD,CAAQZ,MAAO,CAAEC,SAAU,EAAGY,WAAY,WAAaC,KAAMlC,EAAM+B,IAAKI,OAAO,SAASb,QAAQ,aAC5F,kBAACH,EAAA,EAAD,CAAYG,QAAQ,SAApB,oBAKA,qCAGZ,kBAACc,EAAA,EAAD,CAAYC,QAAS,WA3DI,uBA2DuB9B,EA3D5CI,KAAK2B,YACb9B,EACI,kBAAC+B,EAAA,EAAD,CAAMC,IAAI,GACN,kBAACC,EAAA,EAAD,CAAUnC,UAAWL,EAAQN,iBAIrCa,EAAY,kBAACH,EAAA,EAAD,CAAgBC,UAAWL,EAAQN,iBAoDgBW,UAAWL,EAAQN,cACzEY,M,SC7Ff3B,EAAYC,aAAW,SAACC,GAAD,kBAC3BC,KAAM,CACJI,QAAS,QAEXuD,OAAQ,CACNC,OAAQ7D,EAAM6D,OAAOC,OAAS,GAEhCA,OAAQ,CACNrD,MAVgB,QAWhBsD,WAAY,GAEdC,YAAa,CACXvD,MAdgB,SAgBlBwD,gBAAiB,CACfC,SAAU,QAEZC,SAAO,GACL5B,SAAU,GADL,cAEJvC,EAAMoE,YAAYC,GAAG,MAAQ,CAC5BC,YAAatE,EAAMQ,QAAQ,MAHxB,uBAKG,QALH,GAOP+D,QAAS,CACPlE,QAAS,OACTkC,SAAU,EACV3B,cAAe,SACf4D,UAAW,UAEbC,UAAW,CACT1D,MAAO,UACP2D,aAAc,oBACdC,cAAe3E,EAAMQ,QAAQ,MAE/BoE,WAAW,aACT9D,YAAad,EAAMQ,QAAQ,GAC3BO,MAAO,SACNf,EAAMoE,YAAYC,GAAG,MAAQ,CAC5BhE,QAAS,OACTW,SAAU,SAGd6D,QAAS7E,EAAM8E,OAAOD,SA3CK,4BA4Cd,CACXpE,MA/CgB,UAES,mCAgDzBsE,SAAU,MACT/E,EAAMoE,YAAYC,GAAG,MAAQ,CAC5B5D,MAAO,OACP8B,SAAU,KAnDa,KAuSdyC,EA/OH,SAAC9D,GACX,IAAMC,EAAUrB,IADK,EAIOsB,mBAAS,CAAC,CAAC,MAJlB,mBAId6D,EAJc,KAINC,EAJM,OAKC9D,mBAAS,GALV,mBAKd+D,EALc,KAKTC,EALS,OAQehE,oBAAS,GARxB,mBAQdiE,EARc,KAQFC,EARE,KASftF,EAAQuF,cACNC,EAAWtE,EAAXsE,OAEFC,EAAqB,WACzBH,GAAeD,IAYXK,EAAa,SAACC,GAClB,IAAIC,EAAO,IAAIC,KAAiB,IAAZF,EAAmB,MACnCG,EAAQF,EAAKG,WACbC,EAAU,IAAMJ,EAAKK,aACrBC,EAAW,KACXf,EAAMS,EAAKO,SACXC,EAAQR,EAAKS,WACbC,EAAaV,EAAKW,UAElBT,EAAQ,KACVA,GAAS,GACTI,EAAW,MAQb,MAAO,CALaJ,EAAQ,IAAME,EAAQQ,QAAQ,GAAK,IAAMN,EAE7C,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAGlDf,GAFf,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE9EiB,GAAQE,IA5CxC,4CAuDrB,sCAAAG,EAAA,sEACyBC,MAAM,uCAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAIMC,EAAgB,GAEpBD,EAAK3B,OAAO6B,SAAQ,SAAAC,GAElB,IAAIC,EAAYtB,EAAWqB,EAAMC,WAE3BC,EAAW,CACfC,KAAMC,SAASJ,EAAMC,WACrBI,GAAIL,EAAMK,GACVxF,KAAMmF,EAAMnF,KACZoB,YAAa+D,EAAM/D,YACnBgE,UAAWA,EAAU,GACrBK,UAAWL,EAAU,GACrBV,WAAYU,EAAU,GACtBZ,MAAOY,EAAU,GACjBM,QAAS5B,EAAWqB,EAAMO,SAAS,GACnCC,SAAU,GACVC,UAAWT,EAAMS,UACjBvE,IAAK,IAGoB,UAAvBgE,EAASO,UACXP,EAASO,UAAY,GAErBP,EAASO,UAAT,WAAyBP,EAASO,UAAlC,KAMF,IAAIC,EAAUR,EAASjE,YAAY0E,QAAQ,QAC3C,IAAiB,IAAbD,EAAgB,CAClB,IAAIxE,EAAMgE,EAASjE,YAAYwD,OAAOiB,GACf,MAAnBxE,EAAIuD,QAAQ,KACdvD,EAAMA,EAAIuD,OAAO,EAAGvD,EAAI0E,OAAS,IAEnC1E,EAAMA,EAAI2E,MAAM,MAAM,GACtBX,EAAShE,IAAMA,EAGjB,IAAI4E,EAAW,UAAMZ,EAASD,UAAf,cAA8BC,EAASK,SACtDL,EAASM,SAAWM,EAEpBhB,EAAciB,KAAKb,MAMrBJ,EAAckB,MAAK,SAAUtB,EAAGuB,GAC9B,OAAOvB,EAAES,KAAOc,EAAEd,QAGhBe,EAAc,GACdC,EAAY,EACZC,EAAO,GAIXtB,EAAcC,SAAQ,SAAAC,GAChBI,SAASJ,EAAMT,cAAgB4B,EACjCC,EAAKL,KAAKf,IAEVkB,EAAYH,KAAKK,GACjBA,EAAO,CAACpB,GACRmB,QAIJD,EAAYH,KAAKK,GACjBF,EAAYH,KAAK,IAEjB5C,EAAU+C,GA5EZ,6CAvDqB,sBAuIrBnG,qBAAU,YAvIW,mCAwInBsG,KACC,IAGH,IAAMC,OAAuBC,IAAX9C,EAAuB,kBAAMA,IAAS+C,SAASC,WAAOF,EAElExE,EACJ,kBAAC2E,EAAA,EAAD,CACQjH,UAAWL,EAAQ2C,OACnBtB,QAAQ,YACRrB,QAAS,CACPuH,MAAOvH,EAAQ6C,cAGjB,kBAAC2E,EAAA,EAAD,MACA,yBAAKnH,UAAWL,EAAQ8C,iBACtB,kBAAC2E,EAAA,EAAD,KACG,CAAC,aAAaC,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,CAAcC,QAASN,SAI7B,kBAACjG,EAAA,EAAD,MACA,kBAAC+F,EAAA,EAAD,KACG,CAAC,aAAc,aAAc,aAAc,cAAe,cAAe,cAAe,cAAe,cAAe,eAAeC,KAAI,SAACC,EAAMC,GAAP,OACxI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACnBC,IAAU5D,EACT,kBAACgE,EAAA,EAAD,CAAc3H,UAAWL,EAAQsD,UAAW2E,QAASN,IAEnD,kBAACK,EAAA,EAAD,CAAc5F,QAAS,kBAAM6B,EAAO2D,IAAQK,QAASN,WAS3E,OACE,yBAAKtH,UAAWL,EAAQlB,MACtB,kBAACoJ,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQjH,MAAO,CAAEa,WAAY,SAAW3B,UAAWL,EAAQyC,QAC1E,kBAAC+E,EAAA,EAAD,KACE,kBAACrF,EAAA,EAAD,CACEkG,KAAK,QACLjG,QAASkC,EACTjE,UAAWL,EAAQyD,YAEnB,kBAAC6E,EAAA,EAAD,OAEF,yBAAKC,IAAI,qBAAqBlI,UAAWL,EAAQwI,MAAO/G,IAAI,mEAGhE,kBAACgH,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACrB,EAAA,EAAD,CACEJ,UAAWA,EACX7F,QAAQ,YACRuH,OAA4B,QAApB/J,EAAMgK,UAAsB,QAAU,OAC9CC,KAAM5E,EACN6E,QAASzE,EACTtE,QAAS,CACPuH,MAAOvH,EAAQ6C,aAEjBmG,WAAY,CACVC,aAAa,IAGftG,IAGJ,kBAAC8F,EAAA,EAAD,CAAQS,QAAM,EAACP,eAAe,OAC5B,kBAACrB,EAAA,EAAD,CACEtH,QAAS,CACPuH,MAAOvH,EAAQ6C,aAEjBxB,QAAQ,YACRyH,MAAI,GAEHnG,IAIL,0BAAMtC,UAAWL,EAAQgD,SACvB,kBAACwE,EAAA,EAAD,MACC1D,EAAOE,GAAK0D,KAAI,SAAA9B,GAAK,OAEpB,kBAAC,EAAD,CACEmC,IAAKnC,EAAMK,GACXxF,KAAMmF,EAAMnF,KACZ0I,MAAOvD,EAAMC,UACbuD,IAAKxD,EAAMO,QACXtE,YAAa+D,EAAM/D,YACnBnB,KAAMkF,EAAMS,UACZ9E,SAAUqE,EAAMQ,SAChBtE,IAAK8D,EAAM9D,YC5RHuH,QACW,cAA7BhF,OAAOiF,SAASC,UAEe,UAA7BlF,OAAOiF,SAASC,UAEhBlF,OAAOiF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cacc7e30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mealIcon.2e876477.svg\";","module.exports = __webpack_public_path__ + \"static/media/miniEvent.a09af525.svg\";","module.exports = __webpack_public_path__ + \"static/media/workshopIcon.69524b38.svg\";","module.exports = __webpack_public_path__ + \"static/media/speakerIcon.c04ed547.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultIcon.7798c8e5.svg\";","import React, { useEffect, useState } from 'react';\r\nimport { Avatar, Button, Divider, IconButton, Link, Paper, Typography, Zoom } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport mealIcon from '../../mealIcon.svg'\r\nimport miniEvent from '../../miniEvent.svg';\r\nimport workshopIcon from '../../workshopIcon.svg';\r\nimport speakerIcon from '../../speakerIcon.svg';\r\nimport defaultIcon from '../../defaultIcon.svg';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: '2rem',\r\n        padding: '2rem'\r\n    },\r\n    eventHeader: {\r\n        display: 'flex',\r\n    },\r\n    iconSize: {\r\n        height: theme.spacing(5),\r\n        width: theme.spacing(5),\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n    footer: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    favoriteIcon: {\r\n        marginRight: 0,\r\n        marginLeft: 'auto',\r\n        color: '#F59EA5',\r\n        fontSize: '40px'\r\n    }\r\n}));\r\n\r\nconst Event = (props) => {\r\n    const classes = useStyles();\r\n    const [icon, setIcon] = useState();\r\n    const [favorite, setFavorite] = useState(<FavoriteBorder className={classes.favoriteIcon} />)\r\n\r\n\r\n    const changeFavoriteStatus = (element) => {\r\n        if (element.type.displayName === \"FavoriteBorderIcon\") {\r\n            setFavorite(\r\n                <Zoom in={true}>\r\n                    <Favorite className={classes.favoriteIcon} />\r\n                </Zoom>\r\n            )\r\n        } else {\r\n            setFavorite(<FavoriteBorder className={classes.favoriteIcon} />)\r\n        }\r\n    }\r\n\r\n    const title = `${props.name} ${props.type}`\r\n\r\n    useEffect(() => {\r\n        if (props.type === '(MEAL)') {\r\n            setIcon(mealIcon);\r\n        } else if (props.type === '(MINIEVENT)') {\r\n            setIcon(miniEvent);\r\n        } else if (props.type === '(WORKSHOP)') {\r\n            setIcon(workshopIcon);\r\n        } else if (props.type === '(SPEAKER)') {\r\n            setIcon(speakerIcon)\r\n        } else {\r\n            setIcon(defaultIcon);\r\n        }\r\n    }, [props.type])\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <div className={classes.eventHeader}>\r\n                <Typography style={{ flexGrow: 1 }} variant=\"h6\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <Typography className={classes.time} variant=\"h6\">\r\n                    {props.fullTime}\r\n                </Typography>\r\n                <Avatar className={classes.iconSize} variant=\"rounded\" src={icon} />\r\n            </div>\r\n            <br />\r\n            <Divider />\r\n            <br />\r\n            <div className={classes.eventInfo}>\r\n                <Typography paragraph>\r\n                    {props.description}\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.footer}>\r\n                {\r\n                    props.url !== \"\" ? (\r\n                        <Button style={{ flexGrow: 1, background: \"#F59EA5\" }} href={props.url} target=\"_blank\" variant=\"contained\">\r\n                            <Typography variant=\"body1\">\r\n                                Join Livestream\r\n                    </Typography>\r\n                        </Button>\r\n                    ) : (\r\n                            <></>\r\n                        )\r\n                }\r\n                <IconButton onClick={() => changeFavoriteStatus(favorite)} className={classes.favoriteIcon}>\r\n                    {favorite}\r\n                </IconButton>\r\n            </div>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Event;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { IconButton, AppBar, CssBaseline, Divider, Toolbar, Drawer, List, ListItem, ListItemText, Hidden } from '@material-ui/core'\nimport Event from './Components/Event/Event'\nimport { Favorite, Menu } from '@material-ui/icons'\n\nconst drawerWidth = '200px'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(25),\n    },\n    margin: 'auto'\n  },\n  dayItem: {\n    display: 'flex',\n    flexGrow: 1,\n    flexDirection: 'column',\n    textAlign: 'center'\n  },\n  activeDay: {\n    color: '#ec2a39',\n    borderBottom: '2px solid #ec2a39',\n    paddingBottom: theme.spacing(1.5)\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    color: 'black',\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n      fontSize: '30px'\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  image: {\n    maxWidth: \"7%\",\n    [theme.breakpoints.up('sm')]: {\n      width: '40px',\n      flexGrow: 1,\n    },\n  }\n}));\n\nconst App = (props) => {\n  const classes = useStyles();\n\n  // displaying the correct event state variables\n  const [events, setEvents] = useState([[{}]])\n  const [day, setDay] = useState(0);\n\n  // Responsiveness state variables\n  const [mobileOpen, setMobileOpen] = useState(false);\n  const theme = useTheme();\n  const { window } = props;\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  /*\n   * Converts unix time to a user friendly readable time\n   * @param: unix time\n   * @return: an array with 4 values:\n   *    the time of day in form HH:MM AM/PM\n   *    the day of the week: Sunday - Saturday\n   *    the month of the year: January - December\n   *    the day of the month: 1 - 31 \n  */\n  const formatTime = (unix_time) => {\n    let date = new Date(unix_time * 1000 + 3600);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let daySplit = \"PM\";\n    let day = date.getDay();\n    let month = date.getMonth();\n    let dayOfMonth = date.getDate();\n\n    if (hours > 12) {\n      hours -= 12;\n      daySplit = \"PM\"\n    }\n\n    let formattedTime = hours + ':' + minutes.substr(-2) + ' ' + daySplit;\n\n    let dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let monthOfYear = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    return [formattedTime, dayOfWeek[day], monthOfYear[month], dayOfMonth];\n  }\n\n  /*\n   * Called on website load through useEffect hook\n   * makes API call to hack illinois schedule to pull data\n   * creates a new json object per an object of the respones entity with needed data\n   * Functionality: searches for link within description\n   * @return: returns an array of array of objects where each subarray corresponds to the day and \n   *          stores the events on that day\n  */\n  async function getEvents() {\n    const response = await fetch('https://api.hackillinois.org/event/');\n    const json = await response.json();\n\n    let modified_json = [];\n\n    json.events.forEach(event => {\n\n      let startTime = formatTime(event.startTime);\n\n      const new_json = {\n        unix: parseInt(event.startTime),\n        id: event.id,\n        name: event.name,\n        description: event.description,\n        startTime: startTime[0],\n        dayOfWeek: startTime[1],\n        dayOfMonth: startTime[3],\n        month: startTime[2],\n        endTime: formatTime(event.endTime)[0],\n        fullDate: \"\",\n        eventType: event.eventType,\n        url: \"\",\n      }\n\n      if (new_json.eventType === \"OTHER\") {\n        new_json.eventType = \"\";\n      } else {\n        new_json.eventType = `(${new_json.eventType})`\n      }\n\n      // url search in description\n      // ideally the Rest API sending the Response Entity should have url as a separate field\n\n      let url_idx = new_json.description.indexOf('http');\n      if (url_idx !== -1) {\n        let url = new_json.description.substr(url_idx);\n        if (url.substr(-1) === \"!\") {\n          url = url.substr(0, url.length - 1)\n        }\n        url = url.split(\"\\n\")[0]\n        new_json.url = url;\n      }\n\n      let format_date = `${new_json.startTime} - ${new_json.endTime}`;\n      new_json.fullDate = format_date;\n\n      modified_json.push(new_json);\n    });\n\n    // sorts the json\n    // TODO: check to see if this sort is necessary\n\n    modified_json.sort(function (a, b) {\n      return a.unix - b.unix;\n    })\n\n    let sorted_json = [];\n    let first_day = 7;\n    let temp = [];\n\n    // modifying json object to be separated into groups based on day\n\n    modified_json.forEach(event => {\n      if (parseInt(event.dayOfMonth) === first_day) {\n        temp.push(event);\n      } else {\n        sorted_json.push(temp);\n        temp = [event];\n        first_day++;\n      }\n    });\n\n    sorted_json.push(temp)\n    sorted_json.push([]);\n\n    setEvents(sorted_json);\n  }\n\n  // called on load\n  useEffect(() => {\n    getEvents();\n  }, []);\n\n  // Responsiveness\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  const drawer = (\n    <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            <Toolbar />\n            <div className={classes.drawerContainer}>\n              <List>\n                {['Favorites'].map((text, index) => (\n                  <ListItem button key={text}>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                ))}\n              </List>\n              <Divider />\n              <List>\n                {['August 7th', 'August 8th', 'August 9th', 'August 10th', 'August 11th', 'August 12th', 'August 13th', 'August 14th', 'August 15th'].map((text, index) => (\n                  <ListItem button key={text}>\n                    {index === day ? (\n                      <ListItemText className={classes.activeDay} primary={text} />\n                    ) : (\n                        <ListItemText onClick={() => setDay(index)} primary={text} />\n                      )}\n                  </ListItem>\n                ))}\n              </List>\n            </div>\n          </Drawer>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" style={{ background: 'white' }} className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <Menu />\n          </IconButton>\n          <img alt=\"Hack Illinois Logo\" className={classes.image} src=\"https://2020.hackillinois.org/static/media/logo.01347610.svg\" />\n        </Toolbar>\n      </AppBar>\n      <Hidden smUp implementation=\"css\">\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n         {drawer}\n        </Drawer>\n      </Hidden>\n      <Hidden xsDown implementation=\"css\">\n        <Drawer\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          variant=\"permanent\"\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n\n      <main className={classes.content}>\n        <Toolbar />\n        {events[day].map(event => (\n          // <p>{event.name}</p>\n          <Event\n            key={event.id}\n            name={event.name}\n            start={event.startTime}\n            end={event.endTime}\n            description={event.description}\n            type={event.eventType}\n            fullTime={event.fullDate}\n            url={event.url}\n          />\n        ))}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}